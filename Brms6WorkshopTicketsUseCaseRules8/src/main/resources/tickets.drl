package org.jboss.ddoyle.brms.workshop

//list any import classes here.

import org.jboss.ddoyle.brms.workshop.model.Event
import org.jboss.ddoyle.brms.workshop.model.EventPass
import org.jboss.ddoyle.brms.workshop.model.IsAdult
import org.jboss.ddoyle.brms.workshop.model.Person
import org.jboss.ddoyle.brms.workshop.model.Ticket
import org.jboss.ddoyle.brms.workshop.model.TicketOffer
import org.jboss.ddoyle.brms.workshop.model.TicketOffers
import org.jboss.ddoyle.brms.workshop.model.Venue

//declare any global variables here
global org.jboss.ddoyle.brms.workshop.model.TicketOffers ticketOffers;
global org.jboss.ddoyle.brms.workshop.DiscountService discountService;

/*
	Concepts: Tickets of type D cannot be sold to non-adults.
	Non-adults get a 25% discount on tickets.
	Persons with a special event pass get 10% discount on top of all discounts.
	Golden tickets can only be sold to people with an Event pass.
*/

/*
 The idea is to use a flow of rules

 Technical Rules (assess whether someone is an adult) => Filter (filters tickets we can't sell to this person) -> Create TicketOffers with tickets that all stil there -> Apply discounts on the offers -> Apply additional discounts because of a special card,

 Changing the ticket offers can cause rules to fire again, so this might be a nice use-case.
*/


rule "Start ruleflow"
salience 100
when
	Person();
then
	kcontext.getKnowledgeRuntime().startProcess("org.jboss.ddoyle.brms.workshop.RuleFlow");	 
end



//Check whether person is adultt
rule "Is Adult"
ruleflow-group "init"
when 
	$p: Person(age >=18)
then
	insert(new IsAdult($p));
end

rule "Filter Tickets Adults"
ruleflow-group "filter" 
when
	$p:Person()
	not (exists (IsAdult(person == $p)))
	$t:Ticket(event.rating == Event.EVENT_RATING.D)
then
	retract($t)
end

rule "Filter Golden tickets"
ruleflow-group "filter"
when
	$p:Person()
	not (exists (EventPass(person == $p)))
	$t: Ticket(ticketClass == Ticket.TICKET_CLASS.GOLD)
then
	retract($t)
end

rule "Create TicketOffers"
ruleflow-group "create-offers"
when 
	$t: Ticket() 
then 
	TicketOffer tOffer = new TicketOffer($t);
	ticketOffers.addTicket(tOffer);
	insert(tOffer);
end

rule "25% discount for non-adults"
ruleflow-group "discount"
lock-on-active
when
	$p:Person()
	not (exists(IsAdult(person == $p)))
	$t: TicketOffer()
	$d: Integer() from discountService.getDiscount(DiscountService.DISCOUNT_CODE.NON_ADULT);
then
	modify($t) {
		addDiscount($d);	
	}
end

rule "EventPass discount"
ruleflow-group "discount"
lock-on-active
when
	$p:Person()
	EventPass(person ==$p)
	$t: TicketOffer()
	$d: Integer() from discountService.getDiscount(DiscountService.DISCOUNT_CODE.EVENTPASS);
then
	modify($t) {
		addDiscount($d);
	}
end
